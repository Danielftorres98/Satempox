module bluetooth(clk, reset, rx, led);

input clk;
input reset;
input rx;
output reg[7:0] led;

reg [1:0] Estadopresente, Estadosiguiente;
parameter Estado_1 = 3'b00;
parameter Estado_0 = 3'b01;

reg control = 0;
reg done    = 0;
reg[8:0]tmp = 9'b000_000_000;
reg[3:0]i   = 4'b0_000;
reg[10:0]c  = 11'b11_111_111_111;
reg delay   = 0;
reg[1:0]c2  = 2'b11;
reg capture = 0;



always@(posedge clk) begin
	
	if(c < 1734) c = c + 1;
	
	else begin
	
		c = 0;
		delay = ~delay;
		
	end

end



always@(posedge delay) begin
	
	if(c2 > 1) c2 = 0;
	
	else c2 = c2 + 1;

end



always@(c2) begin
	
	if(c2 == 1) capture = 1;
	
	else capture = 0;

end



always@(posedge capture, posedge reset) begin
	
	if(reset) Estadopresente <= Estado_1;
	
	else Estadopresente <= Estadosiguiente;

end



always@(posedge capture, posedge reset) begin
	
	case(Estadopresente) 
	
	Estado_1: if(rx == 1 && done == 0) begin
						
						control = 0;
						Estadosiguiente = Estado_1;
						
				 end 
				 else if(rx == 0 && done == 0) begin
						
						control = 1;
						Estadosiguiente = Estado_0;
						
				 end
				 else begin
						
						control = 0;
						Estadosiguiente = Estado_1;
						
				 end
	
	Estado_0: if(done == 0) begin
						
						control = 1;
						Estadosiguiente = Estado_0;
						
				 end 
				 else begin
						
						control = 0;
						Estadosiguiente = Estado_1;
				 
				 end
						
	default Estadosiguiente = Estado_1;
	
	endcase
	
end



always@(posedge capture) begin
	
	if (control == 1 && done == 0) tmp <= {rx, tmp[8:1]};
	
end



always@(posedge capture) begin

	if(control) begin

		if(i >= 9) begin
		
			i = 0;
			done = 1;
			led <= tmp[8:1];
 		
		end
		else begin
		
			i = i + 1;
			done = 0;
		
		end
	
	end
	else done = 0;

end

endmodule
